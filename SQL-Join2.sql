USE sakila;

-- 1. List the number of films per category.

SELECT c.name as category, COUNT(fc.film_id) as total_films
FROM sakila.film_category fc
JOIN sakila.category c
ON  fc.category_id=c.category_id
GROUP BY category
ORDER BY category;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, ci.city,co.country
FROM sakila.store s
JOIN sakila.address a
ON s.address_id=a.address_id
JOIN sakila.city as ci
ON a.city_id=ci.city_id
JOIN sakila.country co
ON ci.country_id=co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.

SELECT st.store_id as store_id, SUM(p.amount) as revenue
FROM sakila.payment p 
JOIN sakila.staff s
ON p.staff_id=s.staff_id
JOIN sakila.store st
ON s.store_id=st.store_id
GROUP BY store_id;

-- other solution that came up in the group which also works however result is different

SELECT c.store_id, SUM(p.amount) AS 'total_revenue'
FROM sakila.payment p
JOIN sakila.customer c
USING(customer_id)
GROUP BY c.store_id;

-- 4. Determine the average running time of films for each category.

SELECT c.name as category, ROUND(AVG(f.length),2) as average_duration
FROM sakila.film_category fc
JOIN sakila.category c
ON  fc.category_id=c.category_id
JOIN sakila.film f
ON fc.film_id=f.film_id
GROUP BY category
ORDER BY category;

-- 5. Identify the film categories with the longest average running time.

SELECT c.name as category, ROUND(AVG(f.length),2) as average_duration
FROM sakila.film_category fc
JOIN sakila.category c
ON  fc.category_id=c.category_id
JOIN sakila.film f
ON fc.film_id=f.film_id
GROUP BY category
ORDER BY average_duration DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT title, rental_rate 
FROM sakila.film
ORDER BY rental_rate DESC
LIMIT 10;

-- dont know above one is correct

SELECT f.title, COUNT(r.rental_id) as times_rented
FROM sakila.rental r
JOIN sakila.inventory i
ON r.inventory_id=i.inventory_id
JOIN sakila.film f
ON i.film_id=f.film_id
GROUP BY f.title
ORDER BY times_rented DESC;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title, i.store_id, COUNT(i.inventory_id) as available_copies 
FROM sakila.inventory i
JOIN sakila.film f
ON i.film_id=f.film_id
WHERE f.title='Academy Dinosaur' AND i.store_id=1;

-- 8.  List of ALL film titles and if they are available in inventory.


SELECT DISTINCT f.title, COUNT(i.film_id) as available_copies
FROM sakila.film f
LEFT JOIN sakila.inventory i
ON f.film_id=i.film_id
GROUP BY f.title; 

-- this is better using 'case when'

SELECT DISTINCT f.title, COUNT(i.film_id) as film_copies,
CASE 
WHEN (COUNT(i.film_id)=0) THEN 'Not Available'
ELSE 'Available'
END AS status
FROM sakila.film f
LEFT JOIN sakila.inventory i 
ON f.film_id=i.film_id
GROUP BY f.title;
  